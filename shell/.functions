# ================= Git function, prefix with g ================= #
function gurl() {
    if [ -z "$1" ]; then
        echo "Usage: gurl commit-id"
        echo "get the full http url of commit"
    else
        local msg=`git remote -v|grep "origin\s\+.*\s\+(fetch)"|sed -e "s/origin\s\+\(.*\)\s\+(fetch)/\1/"`
        local url=""
      # github
        if [ "${msg:0:14}" == "git@github.com" ]; then
            echo https://github.com/`echo ${msg}|sed -e "s/^git\@github\.com\:\(.*\)\.git$/\1/"`/commit/$1
        fi
    fi
}
# pick commit id from `git log`
function gcid () {
    local commit_id=`git log --pretty=format:'%h %ad %s (%an)' --date=short|percol|sed -e"s/^\([a-z0-9]\+\)\s\+.*$/\1/"`
    echo ${commit_id}
}

#pick commit from `git log` and output its url
function gqurl () {
    local commit_id=`git log --pretty=format:'%h %ad %s (%an)' --date=short|percol|sed -e"s/^\([a-z0-9]\+\)\s\+.*$/\1/"`
    gurl ${commit_id}
}
# ================= End Git function ================= #

# ================= Fzf tool setting ================= #
function pclip() {
    if [ "$OS_NAME" = "CYGWIN" ]; then
        putclip $@;
    elif [ "$OS_NAME" = "Darwin" ]; then
        pbcopy $@;
    else
        if [ -x /usr/bin/xsel ]; then
            xsel -ib $@;
        else
            if [ -x /usr/bin/xclip ]; then
                xclip -selection c $@;
            else
                echo "Neither xsel or xclip is installed!"
            fi
        fi
    fi
}

function ppaste() {
    if [ "$OS_NAME" = "CYGWIN" ]; then
        getclip;
    elif [ "$OS_NAME" = "Darwin" ]; then
        pbpaste;
    else
        if [ -x /usr/bin/xsel ]; then
            xsel --clipboard --output;
        else
            if [ -x /usr/bin/xclip ]; then
                xclip -selection clipboard -o;
            else
                echo -n
            fi
        fi
    fi
}

# search the file and pop up dialog, then put the full path in clipboard
function baseff() {
    local fullpath=$*
    local filename=${fullpath##*/} # remove "/" from the beginning
    filename=${filename##*./} # remove  ".../" from the beginning
    # Only the filename without path is needed
    # filename should be reasonable
    local cli=`find . -not -iwholename '*/vendor/*' -not -iwholename '*/bower_components/*' -not -iwholename '*/node_modules/*' -not -iwholename '*/target/*' -not -iwholename '*.svn*' -not -iwholename '*.git*' -not -iwholename '*.sass-cache*' -not -iwholename '*.hg*' -type f -path '*'${filename}'*' -print | fzf`
    # convert relative path to full path
    echo $(cd $(dirname $cli); pwd)/$(basename $cli)
}

function ff() {
    local cli=`baseff $*`
    #echo ${cli} | sed 's%^'${HOME}'%~%'
    #echo -n ${cli}  | sed 's%^'${HOME}'%~%' | pclip
    echo ${cli}
    echo -n ${cli} | pclip
}

# Windows system file path search
# function cf() {
#     local cli=`baseff $*`
#     local p=`cygpath -w $cli`
#     echo ${p}
#     echo -n ${p} | pclip;
# }
# ================= End Percol tool setting ================= #

# ================= Start english learn tool setting ================= #
# Search english sentence by word in multiple file
function _sen_get_parameter() {
    local content=$@
    if [ -z "$content" ]; then
        content=$(ppaste)
    fi
    echo -n $content
}

function sen() {
    # 添加末尾换行符
    # awk '{print $0,"\n"}'
    # egrep -irh --colour $@ $dir
    local content=$(_sen_get_parameter $@)
    ag -S --nofilename --nonumbers $content $SEN_FOLDER_PATH
}

function senw() {
    local content=$(_sen_get_parameter $@)
    sen $content | ag "\s$content\s"
}

function senwn() {
    local content=$(_sen_get_parameter $@)
    sen "^([1-9]+\.).*?\s$content\s" | ag $content
}

function senwup() {
    local content=$(_sen_get_parameter $@)
    sen "^[A-Z].*?\s$content\s" | ag $content
}

function senwdot() {
    local content=$(_sen_get_parameter $@)
    sen "\s*•.*?\s$content\s" | ag $content
}
# ================= End english learn tool setting ================= #